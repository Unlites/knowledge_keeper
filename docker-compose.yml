version: '3.8'

services:
  app:
    container_name: app
    build: ./
    ports:
      - 8000:8000
    expose:
      - 9000:9000
    depends_on:
      - db
    env_file:
      - .env
    volumes:
      - .:/app
    restart: always
    networks:
      - knowledge_keeper_network

  db:
    container_name: postgres
    image: postgres:15.1
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_DATABASE_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    expose:
      - 5432:5432
    volumes:
      - ./.db_data/postgres/:/var/lib/postgresql/data
      - .:/docker-entrypoint-initdb.d
    networks:
      - knowledge_keeper_network
    restart: always

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.43.0
    volumes:
      - ./metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    expose:
      - 9090:9090
    networks:
     - knowledge_keeper_network
    restart: always

  node_exporter:
    container_name: node_exporter
    image: prom/node-exporter:v1.5.0
    expose:
      - 9100:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - knowledge_keeper_network
    restart: always
  
  grafana:
    container_name: grafana
    user: "0:0"
    image: grafana/grafana-oss:9.4.7
    ports:
      - 9050:3000
    volumes:
      - ./.grafana_data:/var/lib/grafana
      - ./metrics/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./metrics/grafana/provisioning:/etc/grafana/provisioning/dashboards
    networks:
     - knowledge_keeper_network
    restart: always

networks:
  knowledge_keeper_network:
    name: knowledge_keeper_network
